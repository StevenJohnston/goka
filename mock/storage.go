// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lovoo/goka/storage (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	storage "github.com/lovoo/goka/storage"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStorage) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Delete mocks base method
func (m *MockStorage) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), arg0)
}

// DeleteUntil mocks base method
func (m *MockStorage) DeleteUntil(arg0 context.Context, arg1 int64) (int64, error) {
	ret := m.ctrl.Call(m, "DeleteUntil", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUntil indicates an expected call of DeleteUntil
func (mr *MockStorageMockRecorder) DeleteUntil(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUntil", reflect.TypeOf((*MockStorage)(nil).DeleteUntil), arg0, arg1)
}

// Get mocks base method
func (m *MockStorage) Get(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), arg0)
}

// GetOffset mocks base method
func (m *MockStorage) GetOffset(arg0 int64) (int64, error) {
	ret := m.ctrl.Call(m, "GetOffset", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffset indicates an expected call of GetOffset
func (mr *MockStorageMockRecorder) GetOffset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockStorage)(nil).GetOffset), arg0)
}

// Has mocks base method
func (m *MockStorage) Has(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockStorageMockRecorder) Has(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockStorage)(nil).Has), arg0)
}

// Iterator mocks base method
func (m *MockStorage) Iterator(arg0, arg1 []byte) storage.Iterator {
	ret := m.ctrl.Call(m, "Iterator", arg0, arg1)
	ret0, _ := ret[0].(storage.Iterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (mr *MockStorageMockRecorder) Iterator(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockStorage)(nil).Iterator), arg0, arg1)
}

// MarkRecovered mocks base method
func (m *MockStorage) MarkRecovered() error {
	ret := m.ctrl.Call(m, "MarkRecovered")
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRecovered indicates an expected call of MarkRecovered
func (mr *MockStorageMockRecorder) MarkRecovered() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRecovered", reflect.TypeOf((*MockStorage)(nil).MarkRecovered))
}

// Open mocks base method
func (m *MockStorage) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockStorageMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStorage)(nil).Open))
}

// Set mocks base method
func (m *MockStorage) Set(arg0 string, arg1 []byte, arg2 int64) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockStorageMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), arg0, arg1, arg2)
}

// SetOffset mocks base method
func (m *MockStorage) SetOffset(arg0 int64) error {
	ret := m.ctrl.Call(m, "SetOffset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOffset indicates an expected call of SetOffset
func (mr *MockStorageMockRecorder) SetOffset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOffset", reflect.TypeOf((*MockStorage)(nil).SetOffset), arg0)
}

// Snapshot mocks base method
func (m *MockStorage) Snapshot() (storage.Snapshot, error) {
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(storage.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockStorageMockRecorder) Snapshot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStorage)(nil).Snapshot))
}
